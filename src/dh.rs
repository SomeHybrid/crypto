const _121665: [i64; 16] = [0xDB41, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const _9: [u8; 32] = [
    9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

fn unpack(x: [u8; 32]) -> [i64; 16] {
    let mut out = [0i64; 16];

    for i in 0..16 {
        out[i] = x[2 * i] as i64 + ((x[2 * i + 1] as i64) << 8);
    }

    out
}

fn carry(mut elem: [i64; 16]) -> [i64; 16] {
    for i in 0..16 {
        let carry = elem[i] >> 16;
        elem[i] -= carry << 16;
        if i < 15 {
            elem[i + 1] += carry;
        } else {
            elem[0] += 38 * carry;
        }
    }

    elem
}

fn fadd(a: [i64; 16], b: [i64; 16]) -> [i64; 16] {
    let mut out = [0; 16];

    for i in 0..16 {
        out[i] = a[i] + b[i];
    }

    out
}

fn fsub(a: [i64; 16], b: [i64; 16]) -> [i64; 16] {
    let mut out = [0; 16];

    for i in 0..16 {
        out[i] = a[i] - b[i];
    }

    out
}

fn fmul(a: [i64; 16], b: [i64; 16]) -> [i64; 16] {
    let mut product = [0; 31];
    for i in 0..16 {
        for j in 0..16 {
            product[i + j] += a[i] * b[j];
        }
    }

    for i in 0..15 {
        product[i] += 38 * product[i + 16];
    }

    let mut out = [0i64; 16];
    out[..16].clone_from_slice(&product[..16]);
    out = carry(out);
    carry(out)
}

fn finverse(inp: [i64; 16]) -> [i64; 16] {
    let mut out = inp.clone();

    for i in (0..=253).rev() {
        out = fmul(out.clone(), out);
        if i != 2 && i != 4 {
            out = fmul(out, inp);
        }
    }

    out
}

fn cswap(a: &mut [i64; 16], b: &mut [i64; 16], swap: i64) {
    let c = !(swap - 1);

    for i in 0..16 {
        let t = c & (a[i] ^ b[i]);
        a[i] ^= t;
        b[i] ^= t;
    }
}

fn pack(x: [i64; 16]) -> [u8; 32] {
    let mut t = x.clone();

    for _ in 0..3 {
        t = carry(t);
    }

    let mut m = [0i64; 16];
    for _ in 0..2 {
        m[0] = t[0] - 0xffed;

        for i in 1..15 {
            m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
            m[i - 1] &= 0xffff;
        }

        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
        let swap = (m[15] >> 16) & 1;
        m[14] &= 0xffff;
        cswap(&mut t, &mut m, 1 - swap);
    }

    let mut out = [0u8; 32];

    for i in 0..16 {
        out[2 * i] = (t[i] & 0xff) as u8;
        out[2 * i + 1] = (t[i] >> 8) as u8;
    }

    out
}

fn scalarmult(scalar: [u8; 32], point: [u8; 32]) -> [u8; 32] {
    let mut clamped = scalar.clone();
    clamped[0] &= 0xf8;
    clamped[31] = (clamped[31] & 0x7f) | 0x40;
    let x = unpack(point);

    let mut b = x.clone();
    let mut d = [0i64; 16];
    let mut a = [0i64; 16];
    let mut c = [0i64; 16];

    a[0] = 1;
    d[0] = 1;

    let mut e = [0i64; 16];
    let mut f = [0i64; 16];

    for i in (0..=254).rev() {
        let bit = (clamped[i >> 3] as i64 >> (i & 7)) & 1;

        cswap(&mut a, &mut b, bit);
        cswap(&mut c, &mut d, bit);

        e = fadd(a, c);
        a = fsub(a, c);
        c = fadd(b, d);
        b = fsub(b, d);
        d = fmul(e, e);
        f = fmul(a, a);
        a = fmul(c, a);
        c = fmul(b, e);
        e = fadd(a, c);
        a = fsub(a, c);
        b = fmul(a, a);
        c = fsub(d, f);
        a = fmul(c, _121665);
        a = fadd(a, d);
        c = fmul(c, a);
        a = fmul(d, f);
        d = fmul(b, x);
        b = fmul(e, e);

        cswap(&mut a, &mut b, bit);
        cswap(&mut c, &mut d, bit);
    }

    c = finverse(c);
    a = fmul(a, c);
    pack(a)
}

fn scalarmult_base(scalar: [u8; 32]) -> [u8; 32] {
    scalarmult(scalar, _9)
}

fn generate_keypair() -> ([u8; 32], [u8; 32]) {
    let sk = randbytes::<32>();
    let pk = scalarmult_base(sk);
    (pk, sk)
}

fn x25519(sk: [u8; 32], pk: [u8; 32]) -> [u8; 32] {
    scalarmult(sk, pk)
}

#[no_mangle]
pub extern "C" fn fuzz() {
    let input = sidefuzz::fetch_input(64);
    let s1 = &input[0..32];
    let s2 = &input[32..];
    sidefuzz::black_box(scalarmult(s1.try_into().unwrap(), s2.try_into().unwrap()));
}

fn main() {}

// tests adapted from nacl and https://cr.yp.to/highspeed/naclcrypto-20090310.pdf
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_usage() {
        let (alice_pk, alice_sk) = generate_keypair();
        let (bob_pk, bob_sk) = generate_keypair();

        let alice_shared = x25519(alice_sk, bob_pk);
        let bob_shared = x25519(bob_sk, alice_pk);

        assert_eq!(alice_shared, bob_shared);
    }

    #[test]
    fn test_scalarmult_1() {
        let sk = [
            0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a, 0x4b, 0x79, 0xe1, 0x7f, 0x8b, 0x83, 0x80,
            0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26, 0x18, 0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27,
            0xff, 0x88, 0xe0, 0xeb,
        ];

        let expected = [
            0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3, 0x5b, 0x61, 0xc2, 0xec, 0xe4,
            0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78, 0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14,
            0x6f, 0x88, 0x2b, 0x4f,
        ];

        assert_eq!(scalarmult_base(sk), expected);
    }

    #[test]
    fn test_scalarmult_2() {
        let scalar = [
            0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1, 0x72, 0x51, 0xb2,
            0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0, 0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5,
            0x1d, 0xb9, 0x2c, 0x2a,
        ];
        let expected = [
            0x85, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54, 0x74, 0x8b, 0x7d, 0xdc, 0xb4, 0x3e,
            0xf7, 0x5a, 0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38, 0x1a, 0xf4, 0xeb, 0xa4, 0xa9, 0x8e,
            0xaa, 0x9b, 0x4e, 0x6a,
        ];

        assert_eq!(scalarmult_base(scalar), expected);
    }

    #[test]
    fn test_scalarmult_3() {
        let alice_sk = [
            0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1, 0x72, 0x51, 0xb2,
            0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0, 0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5,
            0x1d, 0xb9, 0x2c, 0x2a,
        ];

        let bob_pk = [
            0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3, 0x5b, 0x61, 0xc2, 0xec, 0xe4,
            0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78, 0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14,
            0x6f, 0x88, 0x2b, 0x4f,
        ];

        let expected = [
            0x4a, 0x5d, 0x9d, 0x5b, 0xa4, 0xce, 0x2d, 0xe1, 0x72, 0x8e, 0x3b, 0xf4, 0x80, 0x35,
            0x0f, 0x25, 0xe0, 0x7e, 0x21, 0xc9, 0x47, 0xd1, 0x9e, 0x33, 0x76, 0xf0, 0x9b, 0x3c,
            0x1e, 0x16, 0x17, 0x42,
        ];

        assert_eq!(scalarmult(alice_sk, bob_pk), expected);
    }

    #[test]
    fn test_scalarmult_4() {
        let scalar = [
            0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a, 0x4b, 0x79, 0xe1, 0x7f, 0x8b, 0x83, 0x80,
            0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26, 0x18, 0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27,
            0xff, 0x88, 0xe0, 0xeb,
        ];
        let expected = [
            0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3, 0x5b, 0x61, 0xc2, 0xec, 0xe4,
            0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78, 0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14,
            0x6f, 0x88, 0x2b, 0x4f,
        ];

        assert_eq!(scalarmult_base(scalar), expected);
    }

    #[test]
    fn test_scalarmult_5() {
        let scalar = [
            0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1, 0x72, 0x51, 0xb2,
            0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0, 0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5,
            0x1d, 0xb9, 0x2c, 0x2a,
        ];

        let expected = [
            0x85, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54, 0x74, 0x8b, 0x7d, 0xdc, 0xb4, 0x3e,
            0xf7, 0x5a, 0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38, 0x1a, 0xf4, 0xeb, 0xa4, 0xa9, 0x8e,
            0xaa, 0x9b, 0x4e, 0x6a,
        ];

        assert_eq!(scalarmult_base(scalar), expected);
    }

    #[test]
    fn test_scalarmult_6() {
        let scalar = [
            0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a, 0x4b, 0x79, 0xe1, 0x7f, 0x8b, 0x83, 0x80,
            0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26, 0x18, 0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27,
            0xff, 0x88, 0xe0, 0xeb,
        ];

        let expected = [
            0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3, 0x5b, 0x61, 0xc2, 0xec, 0xe4,
            0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78, 0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14,
            0x6f, 0x88, 0x2b, 0x4f,
        ];

        assert_eq!(scalarmult_base(scalar), expected);
    }

    #[test]
    fn test_scalarmult_7() {
        let alice_sk = [
            0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1, 0x72, 0x51, 0xb2,
            0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0, 0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5,
            0x1d, 0xb9, 0x2c, 0x2a,
        ];

        let bob_pk = [
            0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3, 0x5b, 0x61, 0xc2, 0xec, 0xe4,
            0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78, 0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14,
            0x6f, 0x88, 0x2b, 0x4f,
        ];

        let expected = [
            0x4a, 0x5d, 0x9d, 0x5b, 0xa4, 0xce, 0x2d, 0xe1, 0x72, 0x8e, 0x3b, 0xf4, 0x80, 0x35,
            0x0f, 0x25, 0xe0, 0x7e, 0x21, 0xc9, 0x47, 0xd1, 0x9e, 0x33, 0x76, 0xf0, 0x9b, 0x3c,
            0x1e, 0x16, 0x17, 0x42,
        ];

        assert_eq!(scalarmult(alice_sk, bob_pk), expected);
    }
}
